name: Release And Deploy

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types: [ closed ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
      semver:
        required: false
        type: choice
        description: Select the version
        options:
          - ''
          - skip
          - promote
          - patch
          - new_release
          - breaking_change
          # promote (skip)
          # patch (patch)
          # new_release (minor)
          # breaking_change (major)
          
          # if DEV  -> skip, patch, new-release (minor) or breaking-change (major)
          # if UAT  -> promote of TAG or patch (patch + branch_name)
          # if PROD -> promote of TAG or patch (patch + branch_name)

  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      semver:
        required: true
        type: string
        default: skip

permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.semver_setup.outputs.semver }}
      environment: ${{ steps.output.outputs.environment }}
    steps:
      - name: Semver setup
        id: semver_setup
        uses: pagopa/github-actions-template/nodo5-semver-setup@ce252c8501c9242bd6045f7cdd650736b2f38777
        with:
          semver: ${{ inputs.semver }}

  release:
    name: Create a New Release
    runs-on: ubuntu-latest
    needs: [ setup ]
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Make Release
        id: release
        uses: pagopa/github-actions-template/maven-release@main
        with:
          semver: ${{ needs.setup.outputs.semver }}
          github_token: ${{ secrets.BOT_TOKEN_GITHUB }}
          beta: false

  build-and-push:
    needs: [ setup, release ]
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.semver != 'skip' }}
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Build and Push
        id: semver
        uses: pagopa/github-actions-template/ghcr-build-push@v1.5.4
        with:
          branch: ${{ github.ref_name}}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.release.outputs.version }}

  deploy_azure_fn:
    name: Deploy Azure function
    environment: ${{ needs.setup.outputs.environment }}
    needs: [ setup, release, build-and-push ]
    runs-on: ubuntu-latest
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Set env variables
        run: |
          ENV_SHORT=$(echo ${{needs.setup.outputs.environment}} | cut -c1-1)
          echo "RESOURCE_GROUP=pagopa-$ENV_SHORT-weu-shared-txnm-rg" >> $GITHUB_ENV
          echo "APP_NAME=pagopa-$ENV_SHORT-weu-shared-txnm-fn" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=ghcr.io/pagopa/pagopa-taxonomy:${{needs.release.outputs.version}}" >> $GITHUB_ENV


      - name: 'Azure CLI script: start staging slot'
        uses: azure/CLI@v1
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        with:
          inlineScript: |
            az functionapp start --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --slot staging

      - name: 'Run Azure Functions Container Action: staging slot'
        uses: Azure/functions-container-action@v1.2.1
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        with:
          app-name: ${{ env.APP_NAME }}
          image: ${{ env.REGISTRY_IMAGE }}
          slot-name: staging

      - name: 'Deploy Approval'
        uses: trstringer/manual-approval@v1
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        with:
          secret: ${{ secrets.BOT_TOKEN_GITHUB }}
          approvers: pagopa-team-core
          minimum-approvals: 1
          issue-title: "Deploying ${{ env.TAG }} to prod from staging"
          issue-body: "Please approve or deny the deployment of version ${{ env.TAG }}."
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 360

      - name: 'Run Azure Functions Container Action'
        uses: Azure/functions-container-action@v1.2.1
        with:
          app-name: ${{ env.APP_NAME }}
          image: ${{ env.REGISTRY_IMAGE }}
          slot-name: production

      - name: 'Azure CLI script: end staging slot'
        uses: azure/CLI@v1
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        with:
          inlineScript: |
            az functionapp stop --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --slot staging

      - name: Azure logout
        run: |
          az logout

#  notify:
#    needs: [ setup, release, deploy_azure_fn ]
#    runs-on: ubuntu-latest
#    name: Notify
#    if: always()
#    steps:
#      - name: Report Status
#        if: always()
#        uses: ravsamhq/notify-slack-action@v2
#        with:
#          status: ${{ needs.deploy_azure_fn.result }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          notification_title: 'New Release on ${{ needs.setup.outputs.environment }} ${{ needs.release.outputs.version }} has {status_message}'
#          message_format: '{emoji} <{run_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
#          footer: 'Linked to <{workflow_url}| workflow file>'
#          icon_success: ':white_check_mark:'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
