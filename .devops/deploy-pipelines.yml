parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True

variables:
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'

  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "d"
    RESOURCE_GROUP: 'pagopa-d-weu-shared-rg'
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerNamespace: $(DEV_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    APP_NAME: $(UAT_WEB_APP_NAME)
    STAGE: "u"
    RESOURCE_GROUP: 'pagopa-u-weu-shared-rg'
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerNamespace: $(UAT_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    APP_NAME: $(PROD_WEB_APP_NAME)
    STAGE: "p"
    RESOURCE_GROUP: 'pagopa-p-weu-shared-rg'
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerNamespace: $(PROD_CONTAINER_NAMESPACE)

  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: Release
    jobs:
      - job: make_release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - ${{ if ne(parameters.SEMVER, 'skip') }}:
              - template: templates/maven-github-release/template.yaml@pagopaCommons
                parameters:
                  release_branch: $(SOURCE_BRANCH)
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  ${{ if ne(parameters.SEMVER, 'skip') }}:
                    semver: '${{ parameters.SEMVER }}'
                  ${{ if eq(parameters.SEMVER, 'skip') }}:
                    semver: 'buildNumber' # this case is impossible due to main condition, but it is necessary to work property

          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Build and Push Docker Image
  - stage: Build
    dependsOn: Release
    variables:
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - checkout: self
            persistCredentials: true

          #- script: |
          #    git checkout $(sourceBranch)

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerNamespace)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(current_version)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

  # Deploy on Azure
  - stage: deploy
    variables:
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:
          # deploy fn
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [DEV|UAT]
            condition: in('${{ parameters.ENV }}', 'dev', 'uat')
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "${{variables.APP_NAME}}-shared-taxonomy-fn"
              imageName: "${{variables.dockerNamespace}}/${{ variables.imageRepository }}:latest"
              slotName: production
              resourceGroupName: $(RESOURCE_GROUP)
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [PROD] staging
            condition: eq('${{ parameters.ENV }}', 'prod')
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "${{variables.APP_NAME}}-shared-taxonomy-fn"
              imageName: "${{variables.dockerNamespace}}/${{ variables.imageRepository }}:latest"
              deployToSlotOrASE: true
              slotName: staging
              resourceGroupName: $(RESOURCE_GROUP)

          - script: |
              echo "##vso[task.setvariable variable=version;isOutput=true]$(pomversion.next)"
            name: dockerTag
  - stage: deployApprovalPROD
    condition: eq('${{ parameters.ENV }}', 'prod')
    dependsOn: deploy
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: waitForApprovalPROD
        displayName: waiting for approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            displayName: Manual Approval
            inputs:
              onTimeout: "reject"

      - job: completeProdDeployFn
        displayName: complete prod function deploy
        dependsOn: waitForApprovalPROD
        steps:
          # deploy functions - swap
          - task: AzureAppServiceManage@0
            displayName: Swapping App Service Deploy
            inputs:
              ConnectedServiceName: $(AZURE_SUBSCRIPTION)
              WebAppName: "${{variables.APP_NAME}}-shared-taxonomy-fn"
              ResourceGroupName: $(RESOURCE_GROUP)
              SourceSlot: staging
              SwapWithProduction: true
              Slot: production
